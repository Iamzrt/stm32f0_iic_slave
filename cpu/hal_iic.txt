 /**
  ******************************************************************************
  * @file      
  * @author    
  * @version   
  * @date      
  * @brief    
	
  ******************************************************************************  
  * 
  * 
  ******************************************************************************
  */
/*-- includes ----------------------------------------------------------------*/  
#include "./hal_mcu.h"


/*-- defined -----------------------------------------------------------------*/
#define     SLAVE_ADDR               0x16

#define     I2C_REC_BYTES            20
#define     I2C_TX_BYTES             20


/* I2C FLAG mask */
#define FLAG_MASK               ((u32_t)0x0000FFFF)


/*-- private variables -------------------------------------------------------*/
static   I2C_HandleTypeDef  hi2c1;


u8_t     slaveTxBuff[I2C_TX_BYTES] = {0xE0, 0x2E};
u8_t     slaveRxBuff[I2C_REC_BYTES];

u8_t     txIndex = 0;
u8_t     rxIndex = 0;

BOOL     recFinishFlag = 0;



/*-- functions ---------------------------------------------------------------*/

 

/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
void   hal_iic_init(void)
{
	u32_t  tmpisr = 0;
	
	/* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
	
	hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = SLAVE_ADDR;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    
  }
	
  /* Configure Analogue filter */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    
  }
	
  /* Configure Digital filter */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    
  }
	
	/* I2C1 interrupt Init */
  HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(I2C1_IRQn);
	
	/**
		I2C_IT_ADDRI:     Address match interrupt.
		I2C_IT_STOPI:     STOP detection interrupt.
		I2C_IT_NACKI:     NACK received interrupt.
		I2C_IT_ERRI:      Errors interrupt.
	  I2C_IT_TCI:       TC interrupt. 
	  I2C_XFER_RX_IT:   REC interrupt. 
	*/
   /* Enable ERR, STOP, NACK, and ADDR interrupts */
  tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI | I2C_IT_RXI | I2C_IT_TXI;
	__HAL_I2C_ENABLE_IT(&hi2c1, tmpisr);    
}



/** 
  * @brief   
  * @param      
  * @return  
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
	u32_t  tmpisr = 0;
	
	if(hi2c->Instance == hi2c1.Instance)
	{
		__HAL_I2C_GENERATE_NACK(&hi2c1);
		
		tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI | I2C_IT_RXI | I2C_IT_TXI;
	  __HAL_I2C_ENABLE_IT(&hi2c1, tmpisr); 
	}
}



/** 
  * @brief   
  * @param      
  * @return  
  */
void hal_i2c_addr_cplt(I2C_HandleTypeDef *hi2c, u8_t transferDir, u16_t addrMatchCode)
{
	u8_t i = 0;
	
	if(hi2c->Instance == hi2c1.Instance)
	{	
		/* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
		
		if(transferDir == I2C_DIRECTION_TRANSMIT)		
		{ 
			/* I2C_DIRECTION_TRANSMIT */
			rxIndex = 0;	/* Master write slave device. */
      for(i=0; i<I2C_REC_BYTES; i++)	
			{
        slaveRxBuff[i] = 0;
			}			
		}
		else
		{ 
			/* I2C_DIRECTION_RECEIVE */
			addrMatchCode |= 0x01;  /* Master read slave device. */
		  txIndex = 0;	
			hi2c->Instance->ISR |= I2C_ISR_TXE;
      hi2c->Instance->ISR |= I2C_ISR_TXIS;
      //hi2c->Instance->TXDR = slaveTxBuff[txIndex];			
		} 
		
		slaveRxBuff[rxIndex++] = addrMatchCode;
	}
}




/** 
  * @brief   
  * @param    
  * @return  
  */
void hal_i2c_slave_transmit_cplt(I2C_HandleTypeDef *hi2c)
{
	if(hi2c->Instance == hi2c1.Instance)
	{
		hi2c->Instance->TXDR = slaveTxBuff[txIndex];
		if(txIndex < 1)    
		{					
		  txIndex++;
		}	
			
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXIS);
	}
}


/** 
  * @brief   
  * @param     
  * @return  
  */
void hal_i2c_slave_rx_cplt(I2C_HandleTypeDef *hi2c)
{
	if(hi2c->Instance == hi2c1.Instance)
	{	
		slaveRxBuff[rxIndex] = hi2c->Instance->RXDR;
		if(rxIndex < I2C_REC_BYTES)  rxIndex++;
		else                         rxIndex = 0;
		
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_RXNE);
	}
}


/** 
  * @brief   
  * @param     
  * @return  
  */
void hal_i2c_slave_nack_cplt(I2C_HandleTypeDef *hi2c)
{
	if(hi2c->Instance == hi2c1.Instance)
	{
	  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
	}
}


/** 
  * @brief   
  * @param     
  * @return  
  */
void hal_i2c_slave_stop_cplt(I2C_HandleTypeDef *hi2c)
{
	u8_t i = 0;
	
	if(hi2c->Instance == hi2c1.Instance)
	{
		rxIndex = 0;
		txIndex = 0;
//		for(i=0; i<I2C_REC_BYTES; i++)	
//		{
//			slaveRxBuff[i] = 0;
//		}
		
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
	}
}


/** 
  * @brief   
  * @param     
  * @return  
  */
void  i2c_evt_irq_handler(I2C_HandleTypeDef *hi2c)     
{ 
	u8_t  transferDir = 0;
  u16_t slaveAddrCode = 0;
	u32_t lastEvent = 0;

  /* Get the last event value from I2C status register */
  lastEvent = hi2c->Instance->ISR & FLAG_MASK;
	
	/* 0: Write transfer, slave enters receiver mode.
     1: Read transfer, slave enters transmitter mode. 
	*/
	transferDir = I2C_GET_DIR(hi2c); 
	
	/* Get the slave match address. */
	slaveAddrCode = I2C_GET_ADDR_MATCH(hi2c);
	
	if((lastEvent&I2C_FLAG_ADDR) != RESET)           
	{	/* EV1 */  
    /* Address match interrupt. */
    hal_i2c_addr_cplt(hi2c, transferDir, slaveAddrCode);	
	}
	
	if((lastEvent&I2C_FLAG_RXNE) != RESET)                  
	{ /* EV2 */ 
		/* Receive interrupt. */
	  hal_i2c_slave_rx_cplt(hi2c);
	}
	
	if((lastEvent&I2C_FLAG_TXIS) != RESET)
	{ /* EV3 */
	  hal_i2c_slave_transmit_cplt(hi2c);
	}
	
	if((lastEvent&I2C_FLAG_AF) != RESET)
	{ /* EV3_2 */
	  hal_i2c_slave_nack_cplt(hi2c);
	}
	
	if((lastEvent&I2C_FLAG_STOPF) != RESET)
	{ /* EV4 */
	  hal_i2c_slave_stop_cplt(hi2c);
	}
	
} 



/** 
  * @brief   This function handles I2C1 global interrupt.
  * @param    
  * @param    
  * @return  
  */
void I2C1_IRQHandler(void)
{
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) 
	{
    HAL_I2C_ER_IRQHandler(&hi2c1);
  } 
	else 
	{
    //HAL_I2C_EV_IRQHandler(&hi2c1);
		i2c_evt_irq_handler(&hi2c1);
  }
}

/*------------------ end of file ---------------------------------------------*/
